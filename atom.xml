<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[ifzer]]></title>
  <subtitle><![CDATA[every one to be ifzer]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://www.ifzer.com/"/>
  <updated>2015-04-21T10:52:46.828Z</updated>
  <id>http://www.ifzer.com/</id>
  
  <author>
    <name><![CDATA[bangsen yin]]></name>
    <email><![CDATA[020lilin@gmail.com]]></email>
  </author>
  
  <generator uri="http://zespia.tw/hexo/">Hexo</generator>
  
  <entry>
    <title><![CDATA[在mac下制作ubuntu的启动盘]]></title>
    <link href="http://www.ifzer.com/2015/04/21/ubuntu_u_pan/"/>
    <id>http://www.ifzer.com/2015/04/21/ubuntu_u_pan/</id>
    <published>2015-04-21T12:25:58.000Z</published>
    <updated>2015-04-21T10:51:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="主要步骤(详情可见)">主要步骤(<a href="http://www.pc6.com/edu/73966.html" target="_blank" rel="external">详情可见</a>)</h3>
<ol>
<li>下载ubuntu.iso, 转成IMG格式, 在终端(terminal)中输入<code>hdiutil convert -format UDRW -o output.img inputPath</code></li>
<li>查询USB设备号, <code>diskutil list</code>, 查看与你USB一样大小的设备</li>
<li>创建可启动的USB驱动盘, <code>sudo dd if=/path-to-img-path of=/dev/rdiskN bs=1m</code>, <strong>注意修改N为你的USB号</strong></li>
<li>弹出USB, 去你要安装的电脑, 设置从USB驱动. 然后可以选择是双系统, 还是只安装Ubuntu</li>
</ol>
]]></content>
    
    
      <category term="ubuntu" scheme="http://www.ifzer.com/tags/ubuntu/"/>
    
      <category term="blog" scheme="http://www.ifzer.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[一步之遥]]></title>
    <link href="http://www.ifzer.com/2015/01/06/yibauzhiyao/"/>
    <id>http://www.ifzer.com/2015/01/06/yibauzhiyao/</id>
    <published>2015-01-06T15:55:58.000Z</published>
    <updated>2015-01-06T15:43:42.000Z</updated>
    <content type="html"><![CDATA[<h3 id="一步之遥">一步之遥</h3>
<p>一步之遥为2014年的收尾大片之一，另外一部为智取威虎山。当一步之遥出预告片的时候，大家都对姜文大导演充满了期待，然而上画后，差评如潮，刷新了烂片的下限，有没有。</p>
<p>TODO</p>
]]></content>
    
    
      <category term="随写" scheme="http://www.ifzer.com/tags/%E9%9A%8F%E5%86%99/"/>
    
      <category term="blog" scheme="http://www.ifzer.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[2014年总结]]></title>
    <link href="http://www.ifzer.com/2015/01/04/2014nian_zongjie/"/>
    <id>http://www.ifzer.com/2015/01/04/2014nian_zongjie/</id>
    <published>2015-01-04T14:25:58.000Z</published>
    <updated>2015-01-04T15:57:16.000Z</updated>
    <content type="html"><![CDATA[<h3 id="2014年的总结">2014年的总结</h3>
<p>匆匆一眼，就过完了2014年。现在又到年经贴的时间了，不管我喜欢不喜欢写，领导需要你写，所以还是不得不写，虽然这个不是写给领导看的，是为自己而写的。</p>
<h4 id="失">失</h4>
<ol>
<li>考了一次软考—中级设计师，可是一天的书本都没有看，结果可想而知，上午和下午的都没有及格，同行的其他两位同事都比我好，虽然他们也都有通过，但是至少有一门是过了的。这事可以好好的打击下自己。</li>
<li>上半年的时光，过得很飘忽，没有静下心去，学习的知识也挺表面化的，所以这事对于自己来说还是挺浪费时间的，好像是在浪费生命一样</li>
<li>下半年开始有换工作的想法，面试了些公司，高不成低不就的，也想转向Objective-C的，但是还是没有一直坚持下去，这样慢慢就又把学过的OC的知识给忘记了</li>
</ol>
<h4 id="得">得</h4>
<ol>
<li>学习了我挺喜欢的语言RUBY，松本行弘创造于1993年的脚本语言，平时最喜欢用的是ruby的交互方式中的计算器，只要打开iTerm输入irb就可以在里面进行计算了，另外还有些很强大的文字处理功能，但是用的不多，很容易就会忘记了</li>
<li>年初入手MAC，使用了整整一年，体验到了它的精细，键盘好用，屏幕好看，升级了yosemite后性能不是那么好了，不过得到的好的用户体验，还是不错的</li>
<li>农历春节入手Kindle Paperwhite2 日版，在淘宝上找人代购回来，本来想着一个月可以看一本书的，结果看的书真的好少，看的Amazon上的免费的杂志倒是挺多的，例如，知乎周刊，想想简书，雪球专刊，财蜜周刊，码农。。。，主要的看书时间是在早上上班地铁上的时间里，大概20多分钟</li>
<li>入了Ipad Air2 ，性能方面确实挺出众的，使用方面用的比较多的是拍照，其它用于游戏的时间比较多，现在玩的多的是海岛奇兵，另外由于Apple在中国区搞了一元的APP卖，所以充了50，买了45个APP，任性了一回，其它时间就是看视频了</li>
<li>面试被打击后，发现自己的价值真的低的吓人，后来公司来了个博士，做我们组的项目经理，在他的带领下，心态变好了，我不是为现在这家公司而做，而是为下家公司而做，所以我的生活从2014上12月后，基本上都是下班后还在公司自己主动做些事情，以增加自己的筹码，为下家公司增加自己的重量</li>
<li>从农历春节开始练习的吉他指弹版Canon，练的是《弹指之间》里的Canon，到2014年12月31号止，基本上可以弹出来，但是节奏方面还不好，另外还需要加强熟练度。</li>
<li>基金定投，从12年7月开始，每月在工行定投1000的基金，到14年底，纯收益大概7K多，虽然是挺少的收入，但是它让我对理财方面更加有信心</li>
</ol>
<h3 id="2015展望">2015展望</h3>
<p>希望接下来的2015年里面，可以做好下面10件中的3件：</p>
<ol>
<li>有时间就去锻炼身体，打下篮球，羽毛球，乒乓球或游泳</li>
<li>继续练习吉他，但偏向弹唱</li>
<li>学习美声唱法和吸气入丹田</li>
<li>尝试其它方式的理财产品，时间多的话可以观察下股市</li>
<li>工作上面需要加倍努力，加强专业知识，扩宽知识面</li>
<li>找个对象，谈个恋爱</li>
<li>去一趟半个月的旅行，期望的目的地是西藏，去感受下不一样的人文，让心灵被洗涤</li>
<li>期望一个月可以看一本书，用kindle，杂志不算</li>
<li>利用业余时间做个项目，工具类的，向AFinal的作者一样，把项目做到易用，大众，为开源做些贡献</li>
<li>多陪父母</li>
</ol>
<p>Jobs开会的时候会让经理们说出公司接下来最想做的10件产品，待有10项后，他又会去掉其它的7项，只留下3项最重要的。</p>
<p>对于我来说，死亡不是一件可怕的事情，但是我不想生着病而不立马死去，所以我希望身体是健康的，这样我可以去做我想去做的事情，所以第一项是需要的，另外第10项多陪父母，这个也是挺重要的，毕竟陪父母的时间是有限的，不要到了子欲孝而亲不在的时候再去后悔，最后一件最重要的事情，应该是6，但不确定，所以2015最想的事情还是1 和 10，其它8件事次之。</p>
<h3 id="结">结</h3>
<p>最后希望2015顺利！</p>
]]></content>
    
    
      <category term="2014" scheme="http://www.ifzer.com/tags/2014/"/>
    
      <category term="blog" scheme="http://www.ifzer.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[积累开发中经常用到的代码]]></title>
    <link href="http://www.ifzer.com/2014/12/11/accumulate_it/"/>
    <id>http://www.ifzer.com/2014/12/11/accumulate_it/</id>
    <published>2014-12-11T11:25:58.000Z</published>
    <updated>2014-12-11T10:40:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="积累">积累</h3>
<p>工作了这么多年，感觉自己好像没有积累下来下工具类，可能与之前一直没有使用自己的电脑开发有关吧。但这可能也只是个人借口。从现在做起，把有用的或经常需要用的积累下来，<strong>just do it</strong></p>
<h3 id="工具-eclipse">工具-eclipse</h3>
<p>使用Eclipse开发，现在把常用的code template一些常用的插件记录了下来了。</p>
<ol>
<li>svn plugin <a href="http://eclipse.org/subversive/" target="_blank" rel="external">subversive</a></li>
<li>color plugin <a href="http://eclipsecolorthemes.org/?view=plugin" target="_blank" rel="external">colortheme</a>, 自己使用的是Oblivion，感觉这个比较适合自己的眼睛</li>
<li>code recommender, 这个插件是在juno的eclipse中自带的，会提供个百分比，显示哪个方法使用的多，使用的最多的排在最上面</li>
<li>findbug ,用于查找出代码中潜在的bug</li>
<li>…</li>
</ol>
<h3 id="工具-evernote">工具-evernote</h3>
<p>使用evernote记录了好多的东西，有好多学习方面的有用的资料，但好久没有进行过整理了，这些笔记需要经常整理，这样才能把知识吸收，不然只是一个资料库而已</p>
<h3 id="工具-markdown">工具-markdown</h3>
<p>使用markdown记录下各种自己写出来的文章，用以放在github pages中显示出来，慢慢积累</p>
<h3 id="代码-使用GitHub">代码-使用GitHub</h3>
<p>目前将常用的代码放在了github上的tools4java项目中，<a href="https://github.com/ivan-yin/tools4java.git" target="_blank" rel="external">tools4java</a>，这个项目中记录下了常用的java代码。</p>
]]></content>
    
    
      <category term="utils" scheme="http://www.ifzer.com/tags/utils/"/>
    
      <category term="code" scheme="http://www.ifzer.com/tags/code/"/>
    
      <category term="blog" scheme="http://www.ifzer.com/categories/blog/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop eclipse 插件]]></title>
    <link href="http://www.ifzer.com/2014/11/11/hadoop_eclipse_plugin/"/>
    <id>http://www.ifzer.com/2014/11/11/hadoop_eclipse_plugin/</id>
    <published>2014-11-11T03:11:11.000Z</published>
    <updated>2014-11-11T07:37:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="前提准备过程">前提准备过程</h3>
<p>apache <a href="http://ant.apache.org" target="_blank" rel="external">ant</a>,需要用ant来构建插件，在这里我使用<code>brew install ant</code>进行了安装，安装成功后<code>ant -version</code>后输出版本信息，则表示安装成功了：</p>
<pre><code>    ant -<span class="built_in">version</span>
    Apache Ant(TM) <span class="built_in">version</span> <span class="number">1.9</span><span class="number">.4</span> compiled <span class="command"><span class="keyword">on</span> <span class="title">April</span> <span class="title">29</span> <span class="title">2014</span></span>
</code></pre><hr>
<h3 id="源代码地址">源代码地址</h3>
<p><a href="https://github.com/winghc/hadoop2x-eclipse-plugin" target="_blank" rel="external">hadoop2x-eclipse-plugin</a></p>
<p>里面的realease目录中有已经生成好的jar包，复制这个jar到eclipse的plugins中就可以了。</p>
<hr>
<h3 id="使用ant进行构建">使用ant进行构建</h3>
<p>本地下载的Hadoop的版本是2.5.1，所以在进行ant build的命令时，在Hadoop的 libexec/share/hadoop/common/lib/下面，好多的依赖jar包都找不到，所以就直接把realease目录中有已经生成好的jar包，复制到eclipse的plugins里面去了。重新启动eclipse后，可以cmd+n,选MapReduce项目，就能做Hadoop的开发了。</p>
]]></content>
    
    
      <category term="hadoop" scheme="http://www.ifzer.com/tags/hadoop/"/>
    
      <category term="eclipse" scheme="http://www.ifzer.com/tags/eclipse/"/>
    
      <category term="plugin" scheme="http://www.ifzer.com/tags/plugin/"/>
    
      <category term="java" scheme="http://www.ifzer.com/categories/java/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Nightmares from the Deep被诅咒的心,典藏版 HD]]></title>
    <link href="http://www.ifzer.com/2014/11/08/nightmares_from_the_deep/"/>
    <id>http://www.ifzer.com/2014/11/08/nightmares_from_the_deep/</id>
    <published>2014-11-08T15:55:18.000Z</published>
    <updated>2014-11-08T15:44:58.000Z</updated>
    <content type="html"><![CDATA[<h3 id="Nightmares_from_the_Deep™:_被诅咒的心,典藏版_HD"><a href="https://itunes.apple.com/cn/app/nightmares-from-deep-bei-zu/id536578584?mt=8" target="_blank" rel="external">Nightmares from the Deep™: 被诅咒的心,典藏版 HD</a></h3>
<p>昨天在新iPad air2上下载了这个游戏，今天上午9点多开始玩，直到2点多过关了。</p>
<p>对游戏里面的提示，感到非常的喜欢，因为提示的十分到位。</p>
<p>需要吐槽的是它里面的找东西，每次都是乱点，瞎点，误打误撞才解开了，感觉这个找东西的Puzzle还是弱智了些，其它的需要动脑的Puzzle个人比较喜欢，虽然有的时间会用的多些，但还是挺喜欢的。另外剧情比较老套，为了爱情而复仇。</p>
]]></content>
    
    
      <category term="game" scheme="http://www.ifzer.com/tags/game/"/>
    
      <category term="game" scheme="http://www.ifzer.com/categories/game/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hadoop上机操作部分]]></title>
    <link href="http://www.ifzer.com/2014/11/07/hadoop_action01/"/>
    <id>http://www.ifzer.com/2014/11/07/hadoop_action01/</id>
    <published>2014-11-06T16:25:18.000Z</published>
    <updated>2014-11-06T16:22:33.000Z</updated>
    <content type="html"><![CDATA[<h3 id="在网上找的两个很适合刚学Hadoop的开源项目">在网上找的两个很适合刚学Hadoop的开源项目</h3>
<ol>
<li>以地震的数据进行MapReduce，可分析出各个城市的最大，最小震级。源代码<a href="https://github.com/umermansoor/hadoop-java-example.git" target="_blank" rel="external">地址</a>，真的是挺简单的入门例子，适合我这种刚学的人。</li>
<li>这个例子是统计单词的出现次数的，<a href="https://github.com/popcornylu/hadoop-wordcount.git" target="_blank" rel="external">Word Count</a>。和上面的震级的例子一样，很简单，也适合我这种刚学Hadoop的，不过这个项目使用的是Gradle进行的项目构建，所以你需要在本机上也安装Gradle的构建工具。</li>
</ol>
<h3 id="命令行操作HDFS的上传文件">命令行操作HDFS的上传文件</h3>
<p>参考的是Hadoop的<a href="http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/SingleCluster.html" target="_blank" rel="external">文档</a>的#Execution部分</p>
<ol>
<li><p>格式化文件系统</p>
<pre><code> bin/hdfs namenode -<span class="built_in">format</span>
</code></pre></li>
<li><p>启动NameNode后台程序和DataNode：</p>
<pre><code> sbin/start-dfs.<span class="keyword">sh</span>
</code></pre></li>
<li><p>在浏览器中可以查看NameNode，<a href="http://localhost:50070" target="_blank" rel="external">URL</a></p>
</li>
<li><p>新建HDFS目录以进行MapReduce工作：</p>
<pre><code> bin/hdfs dfs -mkdir /<span class="literal">user</span>
 bin/hdfs dfs -mkdir /<span class="literal">user</span>/&lt;username&gt;
</code></pre></li>
<li><p>复制文件到HDFS中：</p>
<pre><code> bin<span class="regexp">/hdfs dfs -put etc/</span>hadoop <span class="regexp">/user/</span>yourusername<span class="regexp">/hadoop/i</span>nput
 <span class="comment">//如果没有hadoop和input目录，请按第四步进行创建</span>
</code></pre></li>
<li><p>运行Hadoop提供的例子：</p>
<pre><code> bin/hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-<span class="number">2.5</span>.<span class="number">1</span>.jar <span class="keyword">grep</span> <span class="built_in">input</span> output
 //这里的<span class="built_in">input</span> &amp;&amp; output 也是要存在于HDFS中的，如果没有要自己创建，<span class="built_in">input</span>需要指定到具体的文件，例如hdfs-site.xml
 //这里运行的完了后，发现output/part-<span class="keyword">r</span>-<span class="number">00000</span>中的输出为<span class="number">0</span>字节，好奇怪的，感觉是文件中没有这样的字符，然后没有<span class="keyword">grep</span>出来
</code></pre></li>
<li><p>检查output文件，可以下载下来查看，也可以在DFS中查看</p>
<pre><code> bin/hdfs dfs -<span class="built_in">get</span> output output
 <span class="keyword">cat</span> output/*
 // -<span class="built_in">get</span> output 这里的output在HDFS中要指定全路径

 bin/hdfs dfs -<span class="keyword">cat</span>/more/less... output/*
</code></pre></li>
<li><p>上面的都完成了，可以停止DFS了</p>
<pre><code> sbin/<span class="keyword">stop</span>-dfs.<span class="keyword">sh</span>
</code></pre></li>
</ol>
<h3 id="今天的学习到此。">今天的学习到此。</h3>
]]></content>
    
    
      <category term="hadoop" scheme="http://www.ifzer.com/tags/hadoop/"/>
    
      <category term="java" scheme="http://www.ifzer.com/tags/java/"/>
    
      <category term="hadoop" scheme="http://www.ifzer.com/categories/hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hadoop学习-On slide share]]></title>
    <link href="http://www.ifzer.com/2014/11/06/hadoop_slide/"/>
    <id>http://www.ifzer.com/2014/11/06/hadoop_slide/</id>
    <published>2014-11-05T16:25:58.000Z</published>
    <updated>2014-11-05T16:08:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Hadoop,_the_Apple_of_Our_Eyes_(這些年，我們一起追的_Hadoop)">Hadoop, the Apple of Our Eyes (這些年，我們一起追的 Hadoop)</h2>
<p><a href="http://www.slideshare.net/KuoChunSu/hadoop-the-apple-of-our-eyes-hadoop" target="_blank" rel="external">http://www.slideshare.net/KuoChunSu/hadoop-the-apple-of-our-eyes-hadoop</a><br>在slide share上学习了这篇文章，作者分析的很好，分享给其它同事看的时候，他竟然不能打开，可怜的国内网络，把太多好的东西都挡了，如果可以下载的话那么也可以分享到其它同事或者需要学习的人。</p>
<h2 id="文章中提到的大纲">文章中提到的大纲</h2>
<ol>
<li>前提提要</li>
<li>进击的Hadoop</li>
<li>Hadoop家族</li>
<li>Hadoop战队</li>
<li>Hadoop富二代</li>
<li>Hadoop小圈圈</li>
<li>喝咖啡骑大象建议</li>
</ol>
<h3 id="进击的Hadoop">进击的Hadoop</h3>
<h4 id="Hadoop_1-x_架构中的限制：">Hadoop 1.x 架构中的限制：</h4>
<ul>
<li>每个Cluster大概4K~4.5K个Node</li>
<li>JobTracker是架构瓶颈</li>
<li>HDFS只能有一个Namespace，没办法分开管控/sales,/accounting, …</li>
<li>只能招待MapReduce Job</li>
<li>。。。</li>
</ul>
<h4 id="Hadoop_2-x_架构">Hadoop 2.x 架构</h4>
<p>基本的模块：</p>
<ul>
<li>Hadoop Common(Core Lib)</li>
<li>Hadoop HDFS(Storage)</li>
<li>Hadoop MapReduce (Computing Engine)</li>
<li>Hadoop YARN(Resource Management + Job Scheduling/Monitoring)</li>
</ul>
<p>Hadoop 2.x 默默地做了四五年了。。。，但向后兼容做的很棒，Yahoo！去年已经把2.x部署在35K+ Node跑了六个月以上。。。</p>
<h4 id="2-x架构流程">2.x架构流程</h4>
<ol>
<li>submit job</li>
<li>构建特定AM（ApllicationMaster）</li>
</ol>
<ul>
<li>向RM（ResourceManager）注册AM</li>
<li>发送Request给RM</li>
<li>配置启动Container</li>
<li>AM/Container沟通</li>
<li>Client/AM沟通</li>
<li>回收AM</li>
</ul>
<h4 id="MapReduce（MRv2）分式优点">MapReduce（MRv2）分式优点</h4>
<p>RM其实是Resource Arbitrator，要考量到Capacity， Fairness, SLA等问题，也提供Pluggable Interface的不同想法</p>
<p>AM其实是MRv1与MRv2最大的不同， 负责与中央的RM与各地的NodeManager协调沟通，招待与监督各个Container的动作状况，容错也归它管。</p>
<p>因为<strong>AM分担了MRv1时代RM要做的大多数工作</strong>，所以MRv2的RM变得非常的Scalable，撑到10K+ Node也不是问题。又因为AM是Per-Application配置，所以也不会变成新的瓶颈。</p>
<p>因为AM是Framework-Specific，所以AM就可以变成是一个中立的机制，方便支援各种不同Framework。</p>
<h4 id="YARN_-_Yet_Another_Resource_Negotiator">YARN - Yet Another Resource Negotiator</h4>
<p>分布式应用管理框架</p>
<h3 id="Hadoop家族">Hadoop家族</h3>
<ul>
<li>HDFS:Distributed File System</li>
<li>MapReduce:Distributed Data Analysis Engine</li>
<li>Avro: Language-Neutral Data Serialization System (2010-05 成为Apache Top-Level Project)</li>
<li>Mahout: Scalable Lib for Machine Learning</li>
<li>HBase : Distributed Data Storage (2010-05 top proj)</li>
<li>Pig: High Level Language for Data Analysis(2010-09 top proj)</li>
<li>Hive: Data Warehousing and SQL-Like Query (2010-09 top proj)</li>
<li>Sqoop : Data Migration Tool Between HDFS and RDBMS</li>
</ul>
<h4 id="HCatlalog">HCatlalog</h4>
<p>Hadoop 里面的Naming Service，让各种不同技术，不需要知道资料真实存放的位置，也能够很方便地存取资料</p>
<h4 id="Hive与Pig">Hive与Pig</h4>
<p>大家都想使用Hadoop处理Big Data，但不是每个人都会写MapReduce/Java,于是：</p>
<ul>
<li>Yahoo!做出了Pig， 把PigLatin翻成一堆MapReduce Job</li>
<li>Facebook做出了Hive，把HiveQL翻成一堆MapReduce Job</li>
</ul>
<h3 id="Hadoop战队">Hadoop战队</h3>
<p>目前有的Hadoop Distribution有：</p>
<ul>
<li>Cloudera 有 Cloudera Distribution for Hadoop (CDH)</li>
<li>Oracle 有 Oracle Big Data Appliance Intel 以前有 Intel Distribution for Hadoop (IDH)，現在是直接與 Cloudera 合作 </li>
<li>Hortonworks 有 Hortonworks Data Platform (HDP)</li>
<li>Microsoft 有 Microsoft HDInsight </li>
<li>MapR 有 MapR Distribution for Apache Hadoop (M3, M5, M7) … 喜歡 Make (自造者運動) 的人還是可以去 Apache BigTop 網站自行下載組裝。</li>
<li>…</li>
</ul>
<h3 id="Hadoop富二代">Hadoop富二代</h3>
<p>和Hadoop一起解决Big Data问题</p>
<pre><code>Parallel Processing： Tez Spark <span class="keyword">...</span> 
User Interface： Hue 
SQL on Hadoop： Impala Presto Drill/Dremel/BigQuery <span class="keyword">...</span> 
Data Collector： Flume Chukwa Scribe <span class="keyword">...</span> 
Machine Learning： Mahout <span class="keyword">...</span> 
</code></pre><h3 id="Hadoop小圈圈">Hadoop小圈圈</h3>
<p>一派是Hortonworks：</p>
<ul>
<li>Microsoft(生命共同体)</li>
<li>。。。</li>
</ul>
<p>一派是Cloudera：</p>
<ul>
<li>Intel</li>
<li>DataBricks(Spark)</li>
<li>IBM</li>
<li>Oracle</li>
<li>MapR</li>
<li>。。。</li>
</ul>
<h3 id="喝咖啡骑大象建议">喝咖啡骑大象建议</h3>
<h4 id="Programming">Programming</h4>
<p>Java：</p>
<ul>
<li>曾经是MapReduce心里的唯一</li>
<li>现在是YARN里面人多语言之一</li>
<li><a href="http://svn.apache.org/repos/asf/hadoop/common/trunk/hadoop-mapreduce-project/hadoop-mapreduce-examples/" target="_blank" rel="external">Hadoop MapReduce Examples</a> 是最基本的范例</li>
<li>popcorny提供了一个方便好用的<a href="https://github.com/popcornylu/hadoop-wordcount" target="_blank" rel="external">Gradle的例子wordcount</a></li>
</ul>
<p>因为支援<a href="http://hadoop.apache.org/docs/r1.2.1/streaming.html" target="_blank" rel="external">Hadoop Streaming</a>的关系，其它语言也可以了，例如：</p>
<ul>
<li>Python</li>
<li>Ruby</li>
<li>C/C++</li>
<li>C#</li>
<li>Perl</li>
<li>Bash</li>
<li>…</li>
</ul>
<h4 id="1分钟在线上直接玩Hadoop">1分钟在线上直接玩Hadoop</h4>
<p>URL为<a href="http://gethue.com" target="_blank" rel="external">Hue.com</a><br>Demo为<a href="http://demo.gethue.com" target="_blank" rel="external">demo</a></p>
<h4 id="5分钟在本机建立一个Hadoop_VM">5分钟在本机建立一个Hadoop VM</h4>
<p>需要在<a href="http://hortonworks.com" target="_blank" rel="external">Hortonworks</a>下载它的sandbox</p>
<h4 id="10分钟在云端建立一个Hadoop_Cluster">10分钟在云端建立一个Hadoop Cluster</h4>
<p>需要使用Microsoft提供的Azure</p>
<h3 id="总结">总结</h3>
<p>I should start using hadoop!</p>
<h3 id="上面的知识都来自Slide上面的文章，感谢作者的知识分享。">上面的知识都来自Slide上面的文章，感谢作者的知识分享。</h3>
]]></content>
    
    
      <category term="hadoop" scheme="http://www.ifzer.com/tags/hadoop/"/>
    
      <category term="java" scheme="http://www.ifzer.com/tags/java/"/>
    
      <category term="hadoop" scheme="http://www.ifzer.com/categories/hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[hadoop hdfs学习]]></title>
    <link href="http://www.ifzer.com/2014/11/04/hadoop_hdfs/"/>
    <id>http://www.ifzer.com/2014/11/04/hadoop_hdfs/</id>
    <published>2014-11-04T15:55:58.000Z</published>
    <updated>2014-11-04T15:51:13.000Z</updated>
    <content type="html"><![CDATA[<h2 id="HDFS">HDFS</h2>
<p>HDFS是Apache Hadoop项目中的两个核心组件中的一个，另外一个是MapReduce，HDFS的全名是Hadoop Distributed File System。</p>
<h3 id="HDFS的特点">HDFS的特点</h3>
<p>HDFS和其它分布式文件系统的最大不同是“一次写入，多次读取（write-once-read-many）”，另外的特点有：</p>
<ol>
<li>通过HDFS心跳检测故障，判断Data node是否死亡，以及强大的自动复制Data node，以达到很强的容错性</li>
<li>通过MapReduce流进行数据访问</li>
<li>简单可靠的聚合模型</li>
<li>处理逻辑接近数据，而不是数据接近处理逻辑（这一段需要理解）</li>
<li>跨异构普通硬件和操作系统的可移植性</li>
<li>可靠存储和处理大量数据的可伸缩性</li>
<li>通过跨多个普通个人计算机集群分布数据和处理来节约成本</li>
<li>通过分布数据和逻辑到数据所在的多个节点上进行平行处理来提高效率</li>
<li>通过自动维护多个数据副本和在故障发生时自动重新部署处理逻辑来实现可靠性</li>
</ol>
<hr>
<h3 id="HDFS的API接口">HDFS的API接口</h3>
<p>最重要的一般是HDFS shell commands <code>bin/hdfs dfs -help</code>,里面会有一般性的Unix类的操作，例如chown,chmod,cp,mv,rm……, 更多的可以查看<a href="http://hadoop.apache.org/docs/current/hadoop-project-dist/hadoop-common/FileSystemShell.html" target="_blank" rel="external">File System Shell Guide</a><br>DFSAdmin 用于管理HDFS集群的命令集<br>Name node &amp; Data node , Name用于管理文件系统名称空间操作，比如打开，关闭及重命名文件和目录，还负责将数据块映射到Data node, data node 根据name node的指令创建，删除和复制数据块。</p>
<h3 id="文章大部分摘自IBM-hdfs">文章大部分摘自<a href="http://www.ibm.com/developerworks/cn/web/wa-introhdfs/#authorN10022" target="_blank" rel="external">IBM-hdfs</a></h3>
<p>原文写的很好，为了加深理解，所以摘录些下来，以加深自己的认识，特以记之。</p>
]]></content>
    
    
      <category term="hadoop" scheme="http://www.ifzer.com/tags/hadoop/"/>
    
      <category term="java" scheme="http://www.ifzer.com/tags/java/"/>
    
      <category term="hadoop" scheme="http://www.ifzer.com/categories/hadoop/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在MAC上保存Git的密码]]></title>
    <link href="http://www.ifzer.com/2014/11/02/mac_git_save_password/"/>
    <id>http://www.ifzer.com/2014/11/02/mac_git_save_password/</id>
    <published>2014-11-02T15:55:58.000Z</published>
    <updated>2014-11-02T16:04:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="升级了GIT">升级了GIT</h3>
<p>之前使用的应该是在<a href="http://git-scm.com" target="_blank" rel="external">git-scm</a>上面下载的DMG文件进行安装的，查看到的版本是1.9.3，所以今晚使用了Homebrew进行了安装，<br>目前安装的是最新版本的2.1.2. 在oh-my-zsh的配置文件~/.zshrc里面添加了brew安装的git，然后使用<code>git --version</code>, 就会提示版本是2.1.2了。</p>
<h3 id="保存密码">保存密码</h3>
<p>成功升级后，发现以前不需要输入用户名和密码的，但是现在push到github上面的时候，提示需要输入用户名和密码，所以不是挺方便，在google上搜索后，发现了git的help，<a href="https://help.github.com/articles/caching-your-github-password-in-git/#platform-mac" target="_blank" rel="external">help</a>,<br>只需要4步就可以了，如果已经安装了credential-osxkeychain，则只需要一步就好了。</p>
<ol>
<li><p>在终端中查看是否安装了credential-osxkeychain</p>
<pre><code> <span class="title">git</span> credential-osxkeychain
 <span class="comment"># Test for the cred helper</span>
 <span class="comment"># Usage: git credential-osxkeychain &lt;get|store|erase&gt;</span>
</code></pre></li>
<li><p>如果credential-osxkeychain没有安装，需要下载通过curl</p>
<pre><code> <span class="title">curl</span> -s -O \
 <span class="url">https://github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain</span>
 <span class="comment"># Download the helper</span>

 chmod u+x git-credential-osxkeychain
 <span class="comment"># Fix the permissions on the file so it can be run</span>
</code></pre></li>
<li><p>安装credential-osxkeychain到Git的安装目录</p>
<pre><code> <span class="built_in">sudo</span> mv git-credential-osxkeychain \
 <span class="string">"<span class="variable">$(dirname $(which git)</span>)/git-credential-osxkeychain"</span>
 <span class="comment"># Move the helper to the path where git is installed</span>
 <span class="comment"># Password: [enter your password]</span>
</code></pre></li>
<li><p>告诉git使用osxkeychain使用全局<code>credential.helper</code>的配置：</p>
<pre><code> git config <span class="comment">--global credential.helper osxkeychain</span>
 # <span class="operator"><span class="keyword">Set</span> git <span class="keyword">to</span> <span class="keyword">use</span> the osxkeychain credential helper</span>
</code></pre></li>
</ol>
<p>在上面的都配置好了之后，如果再进行一次push操作，则OSX会提示你是否用OSX的keychain，我选择了全部允许，测试后，不需要输入用户名和密码就提交了。</p>
]]></content>
    
    
      <category term="mac" scheme="http://www.ifzer.com/tags/mac/"/>
    
      <category term="git" scheme="http://www.ifzer.com/tags/git/"/>
    
      <category term="mac" scheme="http://www.ifzer.com/categories/mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[记录下swift学习的进度以及所遇到的问题]]></title>
    <link href="http://www.ifzer.com/2014/11/02/swift_study_record/"/>
    <id>http://www.ifzer.com/2014/11/02/swift_study_record/</id>
    <published>2014-11-02T15:25:58.000Z</published>
    <updated>2014-11-02T15:42:04.000Z</updated>
    <content type="html"><![CDATA[<h2 id="学习的课本为">学习的课本为</h2>
<p><a href="http://www.cocoachina.com/bbs/read.php?tid=205308" target="_blank" rel="external">The Swift Programming LanguageCocoaChina精校PDF完整版</a></p>
<h3 id="知识点">知识点</h3>
<h3 id="问题">问题</h3>
<h3 id="进度">进度</h3>
<p>时间进度 November 2, 2014。<br>将14年9月的练习swift的代码到github仓库中，<br>地址为<a href="https://github.com/ivan-yin/swiftstart.git" target="_blank" rel="external">swiftstart</a></p>
]]></content>
    
    
      <category term="swift" scheme="http://www.ifzer.com/tags/swift/"/>
    
      <category term="ios" scheme="http://www.ifzer.com/tags/ios/"/>
    
      <category term="iOS" scheme="http://www.ifzer.com/categories/iOS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[如何在MacOSX上安装Hadoop(how to install hadoop on mac os x)]]></title>
    <link href="http://www.ifzer.com/2014/10/31/how_to_install_hadoop_on_mac_ox_x/"/>
    <id>http://www.ifzer.com/2014/10/31/how_to_install_hadoop_on_mac_ox_x/</id>
    <published>2014-10-30T16:25:58.000Z</published>
    <updated>2014-10-31T01:45:49.000Z</updated>
    <content type="html"><![CDATA[<h2 id="如何在MacOSX上安装hadoop">如何在MacOSX上安装hadoop</h2>
<ul>
<li>其中一篇文章地址为<a href="http://importantfish.com/how-to-install-hadoop-on-mac-os-x/" target="_blank" rel="external">how-to-install-hadoop-on-mac-os-x</a></li>
<li>另外一篇文章的地址为<a href="http://shayanmasood.com/blog/how-to-setup-hadoop-on-mac-os-x-10-9-mavericks/" target="_blank" rel="external">how-to-setup-hadoop-on-mac-os-x-10-9-mavericks</a>， </li>
</ul>
<p><strong>本文综合以上两篇文章，经过自己测试成功，于是写上这篇，以记录并希望可以帮助到其它人。</strong></p>
<h3 id="简介">简介</h3>
<p>Hadoop是Apache基金会下的项目，它能够处理非常大的数据集在分布式计算环境，它可以运行在三种模式下：</p>
<ul>
<li>独立式<blockquote>
<p>Hadoop运行所有的东西在无后台的单独的JVM中，这种模式适合在开发阶段测试与Debug MapReduce程序</p>
</blockquote>
</li>
<li>伪分布式<blockquote>
<p>Hadoop做为后台应用运行在本地机器，模拟小集群</p>
</blockquote>
</li>
<li>全分布式<blockquote>
<p>Hadoop做为后台应用运行真实的集群电脑中</p>
</blockquote>
</li>
</ul>
<h3 id="准备条件">准备条件</h3>
<ol>
<li><p><strong>Java</strong> 1.6.<em> + ———-<br>Hadoop 需要 Java 版本在1.6.</em> 或以上， 运行<code>java -version</code> 在你的终端中，它会显示你电脑上安装的Java版本：</p>
<pre><code> ➜  Downloads  java -<span class="keyword">version</span>
 java <span class="keyword">version</span> <span class="string">"1.7.0_45"</span>
 Java(TM) SE Runtime Environment (build <span class="number">1.7</span>.<span class="number">0</span>_45-b18)
 Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">24.45</span>-b08, mixed <span class="built_in">mode</span>)
</code></pre></li>
<li><p><strong>SSH keys</strong><br>首先确保<code>远程登录(Remote Login)</code>是打开的，在<code>系统配置(System Preferences)-&gt;分享(Sharing)</code>中可以设置，如果在终端中输入<code>ssh localhost</code>有返回，则你已经配置好了SSH keys,如果没有，可新建：</p>
<pre><code> ssh-keygen -t rsa -P <span class="string">""</span>
</code></pre><p> 为了避免每次询问你的密码，可以授权你的公钥到本地：</p>
<pre><code> cat <span class="variable">$HOME</span>/.ssh/id_rsa.pub <span class="input">&gt;&gt; <span class="variable">$HOME</span>/.ssh/authorized_keys</span>
</code></pre><p> 现在应该可以使用SSH在你的电脑上了，执行：</p>
<pre><code> <span class="title">ssh</span> localhost
</code></pre></li>
</ol>
<h3 id="步骤1_安装homebrew,如果已经安装，跳到第二步">步骤1 安装homebrew,如果已经安装，跳到第二步</h3>
<pre><code>ruby <span class="operator">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)</span>"</span>    
</code></pre><h3 id="步骤2_使用brew_进行安装hadoop,_假定我们安装的是hadoop_2-5-1">步骤2 使用brew 进行安装hadoop, 假定我们安装的是hadoop 2.5.1</h3>
<pre><code>brew <span class="operator"><span class="keyword">install</span> hadoop</span>
</code></pre><h3 id="步骤3_配置hadoop">步骤3 配置hadoop</h3>
<pre><code>cd <span class="regexp">/usr/</span>local<span class="regexp">/Cellar/</span>hadoop<span class="regexp">/2.5.1/</span>libexec<span class="regexp">/etc/</span>hadoop
</code></pre><p>添加下面的行到 <code>hadoop-env.sh</code> :</p>
<pre><code><span class="keyword">export</span> HADOOP_OPTS=<span class="string">"-Djava.security.krb5.realm=OX.AC.UK -Djava.security.krb5.kdc=kdc0.ox.ac.uk:kdc1.ox.ac.uk"</span>
</code></pre><p>添加下面的行到<code>core-site.xml</code></p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
 <span class="tag">&lt;<span class="title">property</span>&gt;</span>
   <span class="tag">&lt;<span class="title">name</span>&gt;</span>hadoop.tmp.dir<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
   <span class="tag">&lt;<span class="title">value</span>&gt;</span>/tmp/hadoop-${user.name}<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
   <span class="tag">&lt;<span class="title">description</span>&gt;</span>A base for other temporary directories.<span class="tag">&lt;/<span class="title">description</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">property</span>&gt;</span> 
<span class="tag">&lt;<span class="title">property</span>&gt;</span>
   <span class="tag">&lt;<span class="title">name</span>&gt;</span>fs.default.name<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
   <span class="tag">&lt;<span class="title">value</span>&gt;</span>hdfs://localhost:9000<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p>添加下面的行到<code>hdfs-site.xml</code></p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
  <span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>dfs.replication<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>1<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><p>添加下面的行到<code>mapred-site.xml</code></p>
<pre><code><span class="tag">&lt;<span class="title">configuration</span>&gt;</span>
  <span class="tag">&lt;<span class="title">property</span>&gt;</span>
    <span class="tag">&lt;<span class="title">name</span>&gt;</span>mapred.job.tracker<span class="tag">&lt;/<span class="title">name</span>&gt;</span>
    <span class="tag">&lt;<span class="title">value</span>&gt;</span>localhost:9001<span class="tag">&lt;/<span class="title">value</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">property</span>&gt;</span>
<span class="tag">&lt;/<span class="title">configuration</span>&gt;</span>
</code></pre><h3 id="绝大部分已经准备好了">绝大部分已经准备好了</h3>
<p>我们必须格式化新安装的HDFS在我们启动运行后台程序前，格式并创新空的文件系统通过创建存储目录和初始化元数据。执行：</p>
<pre><code>hadoop namenode -<span class="built_in">format</span>
</code></pre><h3 id="启动后台程序">启动后台程序</h3>
<p>确保你已经可以SSH到你的本机，通过<code>start-dfs.sh</code>启动HDFS，<code>start-all.sh</code>启动MapReduce</p>
<h3 id="监视">监视</h3>
<p>我们可以监视HDFS，MapReduce<br>HDFS Administrator : <a href="http://localhost:50070" target="_blank" rel="external">http://localhost:50070</a>(在此次执行中可以)</p>
<p>MapReduce Administrator : <a href="http://localhost:50030" target="_blank" rel="external">http://localhost:50030</a>(访问不了，以后找到原因再补上)</p>
]]></content>
    
    
      <category term="mac" scheme="http://www.ifzer.com/tags/mac/"/>
    
      <category term="os" scheme="http://www.ifzer.com/tags/os/"/>
    
      <category term="mac" scheme="http://www.ifzer.com/categories/mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[mac develop setup]]></title>
    <link href="http://www.ifzer.com/2014/10/30/mac_dev_ready/"/>
    <id>http://www.ifzer.com/2014/10/30/mac_dev_ready/</id>
    <published>2014-10-29T16:25:58.000Z</published>
    <updated>2014-10-31T22:57:12.000Z</updated>
    <content type="html"><![CDATA[<h3 id="准备翻译Github上的项目mac_dev_setup">准备翻译Github上的项目<a href="https://github.com/nicolashery/mac-dev-setup" target="_blank" rel="external">mac_dev_setup</a></h3>
<p>可以在线查看此文章<a href="http://www.sourabhbajaj.com/mac-setup/" target="_blank" rel="external">mac-setup</a></p>
<h4 id="发现已经有人翻译一部分了，可以在此查看mac-dev-setup_，所以就不试着翻译了">发现已经有人翻译一部分了，可以在此查看<a href="http://aaaaaashu.gitbooks.io/mac-dev-setup/content/" target="_blank" rel="external">mac-dev-setup</a> ，所以就不试着翻译了</h4>
]]></content>
    
    
      <category term="mac" scheme="http://www.ifzer.com/tags/mac/"/>
    
      <category term="mac" scheme="http://www.ifzer.com/categories/mac/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[学习CSS]]></title>
    <link href="http://www.ifzer.com/2014/10/29/learn_css_layout/"/>
    <id>http://www.ifzer.com/2014/10/29/learn_css_layout/</id>
    <published>2014-10-29T15:55:58.000Z</published>
    <updated>2014-10-29T16:10:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="CSS基础">CSS基础</h2>
<p>今天在Github上看到一个好的项目<a href="https://github.com/incompl/csslayoutsite" target="_blank" rel="external">csslayoutsite</a>，里面有好多的开发方面的知识，这个网站是<a href="http://zh.learnlayout.com" target="_blank" rel="external">学习CSS布局</a>， 跟着一个一个点击下一页，会学习到CSS的相关知识， 在这里可以看到它的目录<img src="http://jjyy.qiniudn.com/cssScreen%20Shot%202014-10-30%20at%2000.06.48.png" alt="image">， 我们可以学习到上面目录上的知识，快快进去上面的网站学习吧。</p>
]]></content>
    
    
      <category term="css" scheme="http://www.ifzer.com/tags/css/"/>
    
      <category term="web" scheme="http://www.ifzer.com/tags/web/"/>
    
      <category term="learn" scheme="http://www.ifzer.com/categories/learn/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[top command on bash]]></title>
    <link href="http://www.ifzer.com/2014/10/21/command_top/"/>
    <id>http://www.ifzer.com/2014/10/21/command_top/</id>
    <published>2014-10-21T09:25:58.000Z</published>
    <updated>2014-10-21T09:48:17.000Z</updated>
    <content type="html"><![CDATA[<p>下午使用了Top，来查看后台提取数据的内存使用情况，一边看着数据的变化，另外一行行的看着man手册的说明， 所以记录下Top的常用命令。</p>
<h3 id="交互模式">交互模式</h3>
<p>在Bash中输入<code>top</code>, 这样就进入了交互模式， 交互模式中最常用的是<code>o</code>, <code>O</code>, <code>c</code>。</p>
<p><code>o</code>我的理解的order ， 以哪个进行排序， 按了<code>o</code>以后， 可排序的有好多，我常用的为，<code>mem, cpu, th</code>,th 表示线程thread, 其它还有好多可以使用， 如果在<code>mem</code>前加上+， 则表示按从小到大的顺序排序， 如果加上-， 则表示按从大到小的顺序排序。</p>
<p><code>O</code>, 表示第二个需要排序的字段， 使用方法与<code>o</code>的一样</p>
<p><code>c</code>， 计算模式， 可选项有<code>a,d,e,n</code>, 默认为n，这一块不理解</p>
]]></content>
    
    
      <category term="bash" scheme="http://www.ifzer.com/tags/bash/"/>
    
      <category term="commands" scheme="http://www.ifzer.com/tags/commands/"/>
    
      <category term="bash" scheme="http://www.ifzer.com/categories/bash/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[忍者应用结构的剖析-获取开始之三]]></title>
    <link href="http://www.ifzer.com/2014/09/17/ninja_anatomy/"/>
    <id>http://www.ifzer.com/2014/09/17/ninja_anatomy/</id>
    <published>2014-09-17T05:35:58.000Z</published>
    <updated>2014-09-17T06:19:51.000Z</updated>
    <content type="html"><![CDATA[<h3 id="介绍">介绍</h3>
<p>忍者做了许多事情，通过约定优于配置。如果事情在正确的地方它将自动工作。</p>
<p>例如路由为你的应用应该总是在conf/Routes.java.并且html视图总是映射到确定的控制器方法通过它们对应的目录结构。</p>
<p>约定被详细解释在接下来的文档部分。</p>
<h3 id="一个例子项目">一个例子项目</h3>
<p>下面的树显示一个例子项目用一些解释来进行说明。项目是完整的项目通过JPA进行数据库访问， 数据库迁移和高级特性如过滤器和参数提取器。</p>
<pre><code>├── pom.xml                                     // <span class="type">Instructions</span> about dependencies <span class="keyword">and</span> the build (<span class="type">Maven</span>) //指令关于项目的依赖与构建， <span class="type">Maven</span>的项目对象模型
└── src
    ├── main
    │   ├── java
    │   │   ├── <span class="type">META</span>-<span class="type">INF</span>
    │   │   │   └── persistence.xml             // <span class="type">Contains</span> informations how to access databases via <span class="type">JPA</span>  //包含如何通过<span class="type">JPA</span>访问数据库的配置信息
    │   │   ├── assets                          // <span class="type">Static</span> assets <span class="keyword">of</span> your application  //静态的资料为你的应用程序 
    │   │   │   └── css
    │   │   │       └── custom.css
    │   │   ├── conf 
    │   │   │   ├── <span class="type">Module</span>.java                 // <span class="type">Dependency</span> injection definitions via <span class="type">Guice</span> (<span class="type">Optional</span>) //通过<span class="type">Google</span> 的<span class="type">Guice</span>进行依赖注入的定义， <span class="type">Guice</span>是可选的， 你也可以使用其它的依赖注入的组件， 如<span class="type">Spring</span>
    │   │   │   ├── <span class="type">Routes</span>.java                 // <span class="type">Contains</span> all routes <span class="keyword">of</span> your application <span class="keyword">in</span> one location //包含你应用的所有路由配置在这一个文件中
    │   │   │   ├── <span class="type">ServletModule</span>.java          // <span class="type">Integration</span> <span class="keyword">of</span> arbitrary servlet filters <span class="keyword">and</span> mappings (<span class="type">Optional</span>) //集成任意的servlet过滤器与映射（可选的）
    │   │   │   ├── <span class="type">StartupActions</span>.java         // <span class="type">Customization</span> <span class="keyword">of</span> application startup (<span class="type">Optional</span>) //自定义应用启动时的动作
    │   │   │   ├── application.conf            // <span class="type">Configuration</span> <span class="keyword">for</span> test dev <span class="keyword">and</span> production mode //应用程序的配置文件， 可以配置test, dev, production等各种模式， 方便开发
    │   │   │   ├── messages.properties         // <span class="number">18</span>n messages //国际化文件
    │   │   │   └── messages_de.properties
    │   │   ├── controllers                     // <span class="type">Controllers</span> will handle the actual request <span class="keyword">and</span> <span class="keyword">do</span> something //控制器处理实际的请求并处理业务
    │   │   │   ├── <span class="type">ApiController</span>.java
    │   │   │   ├── <span class="type">ApplicationController</span>.java
    │   │   │   ├── <span class="type">ArticleController</span>.java
    │   │   │   └── <span class="type">LoginLogoutController</span>.java
    │   │   ├── dao                             // <span class="type">Database</span> access via <span class="type">DAO</span> objects <span class="keyword">and</span> <span class="keyword">not</span> <span class="keyword">in</span> the controller //数据库访问层
    │   │   │   ├── <span class="type">ArticleDao</span>.java
    │   │   │   ├── <span class="type">SetupDao</span>.java
    │   │   │   └── <span class="type">UserDao</span>.java
    │   │   ├── db                              // <span class="type">Database</span> migrations <span class="keyword">when</span> dealing <span class="keyword">with</span> <span class="type">RDBMS</span> (<span class="type">Flyway</span>)//使用<span class="type">RDBMS</span>（<span class="type">Flyway</span>）进行数据库的迁移
    │   │   │   └── migration
    │   │   │       ├── <span class="type">V1__</span>.sql
    │   │   │       └── <span class="type">V2__</span>.sql
    │   │   ├── ehcache.xml                     // <span class="type">Configuration</span> <span class="keyword">for</span> ehcache //配置缓存 
    │   │   ├── etc
    │   │   │   ├── <span class="type">LoggedInUser</span>.java
    │   │   │   └── <span class="type">LoggedInUserExtractor</span>.java  // <span class="type">Argument</span> extractors <span class="keyword">for</span> controller methods //参数提取器为控制器的方法
    │   │   ├── filters
    │   │   │   └── <span class="type">LoggerFilter</span>.java           // <span class="type">Filter</span> to filter the request <span class="keyword">in</span> the controller // 过滤器在控制器中过滤请求
    │   │   ├── logback.xml                     // <span class="type">Logging</span> configuration via logback / slf4j //通过logback/ slf4j 来进行日志的配置
    │   │   ├── models                          // <span class="type">Some</span> models that map to your relational database //一些数据模型映射到关系数据库
    │   │   │   ├── <span class="type">Article</span>.java
    │   │   │   ├── <span class="type">ArticleDto</span>.java
    │   │   │   ├── <span class="type">ArticlesDto</span>.java
    │   │   │   └── <span class="type">User</span>.java
    │   │   └── views                           // html views - always map to a controller <span class="keyword">and</span> a <span class="keyword">method</span> // html视图-总是映射到控制器中的一个方法
    │   │       ├── <span class="type">ApplicationController</span>
    │   │       │   ├── index.ftl.html          // <span class="type">Maps</span> to controller <span class="string">"ApplicationController"</span> <span class="keyword">and</span> <span class="keyword">method</span> <span class="string">"index"</span> //被映射到控制器-<span class="string">"ApplicationController"</span>， 映射到其中的方法名为 <span class="string">"index"</span> 的方法
    │   │       │   └── setup.ftl.html
    │   │       ├── <span class="type">ArticleController</span>
    │   │       │   ├── articleNew.ftl.html
    │   │       │   └── articleShow.ftl.html
    │   │       ├── <span class="type">LoginLogoutController</span>
    │   │       │   ├── login.ftl.html
    │   │       │   └── logout.ftl.html
    │   │       ├── layout
    │   │       │   ├── defaultLayout.ftl.html
    │   │       │   ├── footer.ftl.html
    │   │       │   └── header.ftl.html
    │   │       └── system                      // <span class="type">Error</span> html views. <span class="type">Can</span> be customized to output custom error pages //出错的html视图。可以自定义输出的错误页面
    │   │           ├── <span class="number">403</span>forbidden.ftl.html
    │   │           └── <span class="number">404</span>notFound.ftl.html
    │   ├── resources
    │   └── webapp
    │       └── <span class="type">WEB</span>-<span class="type">INF</span>
    │           └── web.xml                    // <span class="type">Needed</span> <span class="keyword">for</span> servlet containers to start up <span class="type">Ninja</span> //servlet容器需要以启动忍者
    └── test
        ├── java
        │   └── controllers                    // <span class="type">Different</span> tests <span class="keyword">for</span> your application // 不同的测试为你的应用
        │       ├── <span class="type">ApiControllerDocTest</span>.java
        │       ├── <span class="type">ApiControllerDocTesterTest</span>.java
        │       ├── <span class="type">ApiControllerMockTest</span>.java
        │       ├── <span class="type">ApiControllerTest</span>.java
        │       ├── <span class="type">ApplicationControllerFluentLeniumTest</span>.java
        │       ├── <span class="type">ApplicationControllerTest</span>.java
        │       ├── <span class="type">LoginLogoutControllerTest</span>.java
        │       └── <span class="type">RoutesTest</span>.java
        └── resources
            └── test_for_upload.txt    
</code></pre>]]></content>
    
    
      <category term="ninja" scheme="http://www.ifzer.com/tags/ninja/"/>
    
      <category term="java" scheme="http://www.ifzer.com/tags/java/"/>
    
      <category term="framework" scheme="http://www.ifzer.com/tags/framework/"/>
    
      <category term="web" scheme="http://www.ifzer.com/tags/web/"/>
    
      <category term="ninja_web_framework" scheme="http://www.ifzer.com/categories/ninja-web-framework/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[设置你的IDE-获取开始之二]]></title>
    <link href="http://www.ifzer.com/2014/09/17/ninja_setup_your_ide/"/>
    <id>http://www.ifzer.com/2014/09/17/ninja_setup_your_ide/</id>
    <published>2014-09-17T03:35:58.000Z</published>
    <updated>2014-09-17T06:19:11.000Z</updated>
    <content type="html"><![CDATA[<h3 id="只需要导入它">只需要导入它</h3>
<p>通过原型创建的忍者应用只是一个简单普通的Maven项目。意味首你可以导入项目到现代的IDE中， 如Eclipse， Netbeans，IntelliJ等等</p>
<p>如Eclipse可以通过执行：<br><code>mvn eclipse:clean eclipse:eclipse</code><br>然后导入项目到Eclipse中</p>
<p>其它的请参考Maven</p>
<h3 id="一些捕捉。。。。。。">一些捕捉。。。。。。</h3>
<p>忍者的SuperDevMode依赖于一个外部的编译器来编译你的原文件。本质的流程如下：</p>
<ul>
<li>你可以运行忍者的SuperDevMode通过<code>mvn ninja:run</code></li>
<li>你在IDE中更改你的java文件</li>
<li>你的IDE获取到变化并且重新编译文件到.class文件中</li>
<li>忍者的SuperDevMode检测到重新编译的文件并马上显示你应用的最新版本在<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>.</li>
</ul>
<p>非常好。但是这个捕捉是在你的IDE必须重新编译这些文件。如果你的IDE不重新编译文件， 忍者的SuperDevMode将不会有效。</p>
<p>幸运的是基于IDE的工具做了这些工作， 如Eclipse (“Automatically build project 自动构建项目”), Netbeans (“Compile on Save 保存时进行编译”) and IntelliJ 12+. (<a href="http://stackoverflow.com/questions/12744303/intellij-idea-java-classes-not-auto-compiling-on-save" target="_blank" rel="external">http://stackoverflow.com/questions/12744303/intellij-idea-java-classes-not-auto-compiling-on-save</a>).</p>
<h4 id="注释">注释</h4>
<blockquote>
<p>Sometimes Ninja’s SuperDevMode does no longer pick up changes you made. In many cases automatic compilation by the IDE is broken. If you run into that problem it helps to “clean and build” the project from within your IDE.</p>
</blockquote>
<p>有时候忍者的SuperDevMode不再获取你做的修改，在许多情况自动编译通过IDE是被打断的。如果你在遇到这样的问题， 可以通过在IDE中点击”clean and build”项目来解决些问题。</p>
]]></content>
    
    
      <category term="ninja" scheme="http://www.ifzer.com/tags/ninja/"/>
    
      <category term="java" scheme="http://www.ifzer.com/tags/java/"/>
    
      <category term="framework" scheme="http://www.ifzer.com/tags/framework/"/>
    
      <category term="web" scheme="http://www.ifzer.com/tags/web/"/>
    
      <category term="ninja_web_framework" scheme="http://www.ifzer.com/categories/ninja-web-framework/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用忍者创建你的第一个应用-获取开始之一]]></title>
    <link href="http://www.ifzer.com/2014/09/17/ninja_your_first_app/"/>
    <id>http://www.ifzer.com/2014/09/17/ninja_your_first_app/</id>
    <published>2014-09-17T03:25:58.000Z</published>
    <updated>2014-10-21T09:21:53.000Z</updated>
    <content type="html"><![CDATA[<h3 id="创建第一个应用">创建第一个应用</h3>
<p>忍者的特性也被称为“Maven archetypes(原型)”。这些原型是蓝图欢允许你生成一个新的项目通过一个单独的命令。</p>
<p>在忍者的情况中我们建议创建新的忍者项目基于我们的原型“ninja-servlet-archetype-simple”。</p>
<p>你可以使用原型作为开始点来创建你自己的应用。</p>
<p>使用如下的命令来做如上的事情：</p>
<pre><code>mvn archetype:generate <span class="variable">-DarchetypeGroupId=</span>org.ninjaframework <span class="variable">-DarchetypeArtifactId=</span>ninja-servlet-archetype-simple
</code></pre><p>请输入有意义的值为“groupId”和“artifactId”并且让Maven生成你的第一个忍者项目。&gt;</p>
<p>在完成生成的后，更改你的项目目录并执行：</p>
<pre><code><span class="built_in">cd</span> MY_INSTALLED_PROJECT
mvn clean install     <span class="comment">// 首次生成java类文件</span>
mvn ninja:run         <span class="comment">//  启动忍者的SuperDevMode 模式</span>
</code></pre><p>启动忍者的SuperDevMode模式。在浏览器上打开<a href="http://localhost:8080" target="_blank" rel="external">http://localhost:8080</a>.你会看到忍者的救命项目已经在运行。以上就是所有你需要做的来进行创建你的第一个忍者应用。</p>
<h4 id="注释">注释</h4>
<p>SuperDevMode：</p>
<blockquote>
<p>We think that fast and responsive development cycles are a key success factor for software projects. SuperDevMode is our answer to that challenge. Say goodbye to long and time consuming deployment cycles while developing.</p>
</blockquote>
<p>我们认为快速响应的开发周期是软件成功的关键因素之一。SuperDevMode是我们的答案为这样的挑战，是时候告别漫长而耗时的部署周期了。</p>
]]></content>
    
    
      <category term="ninja" scheme="http://www.ifzer.com/tags/ninja/"/>
    
      <category term="java" scheme="http://www.ifzer.com/tags/java/"/>
    
      <category term="framework" scheme="http://www.ifzer.com/tags/framework/"/>
    
      <category term="web" scheme="http://www.ifzer.com/tags/web/"/>
    
      <category term="ninja_web_framework" scheme="http://www.ifzer.com/categories/ninja-web-framework/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[入门与安装忍者-获取开始之零]]></title>
    <link href="http://www.ifzer.com/2014/09/17/ninja_getting_start/"/>
    <id>http://www.ifzer.com/2014/09/17/ninja_getting_start/</id>
    <published>2014-09-17T01:25:58.000Z</published>
    <updated>2014-09-17T06:24:05.000Z</updated>
    <content type="html"><![CDATA[<h3 id="没有太多的安装">没有太多的安装</h3>
<p>每个好的手册都需要“安装软件”的部分。但是说真的， 这里没有太多的安装。忍者只需要两个工具就可以运行了：<code>Java</code>(从1.7版本开始) 和 <code>Maven</code>(从3.1.1)。如果你已经安装了这些工具，你可以跳过这篇了。</p>
<h3 id="安装Java">安装Java</h3>
<p>忍者使用Java做为编程语言，java虚拟机运行你的应用程序，你必须确保你的java版本为1.7</p>
<p>你可以检查你的版本通过执行下面的命令：<br><code>java -version</code></p>
<p>…上面的将输出如下的信息：</p>
<pre><code>java <span class="keyword">version</span> <span class="string">"1.7.0_45"</span>
Java(TM) SE Runtime Environment (build <span class="number">1.7</span>.<span class="number">0</span>_45-b18)
Java HotSpot(TM) <span class="number">64</span>-Bit Server VM (build <span class="number">24.45</span>-b08, mixed <span class="built_in">mode</span>)
</code></pre><p>如你所见我的机器正在运行java 1.7.0_45, 如果你正在使用的是旧版本， 请安装最新的java版本从：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p>
<h3 id="安装Maven">安装Maven</h3>
<p>忍者使用了java的一个工具叫做Maven来构建和建立新的项目。Maven被用于多数基于java 的项目中， 并且很有可能你已经安装了它在你的电脑上。让我们检查下Maven是否已经安装了：<br><code>mvn -v</code></p>
<p>这条命令将会打印出我安装的Maven的版本信息。如下：</p>
<pre><code>Apache Maven <span class="number">3.1</span><span class="number">.1</span> (<span class="number">0728685237757</span>ffbf44136acec0402957f723d9a; <span class="number">2013</span>-<span class="number">09</span>-<span class="number">17</span> <span class="number">23</span>:<span class="number">22</span>:<span class="number">22</span>+<span class="number">0800</span>)
Maven home: /Users/apple/Documents/develop_tool/apache-maven-<span class="number">3.1</span><span class="number">.1</span>
Java <span class="built_in">version</span>: <span class="number">1.7</span><span class="number">.0</span>_45, vendor: Oracle Corporation
Java home: /Library/Java/JavaVirtualMachines/jdk1<span class="number">.7</span><span class="number">.0</span>_45.jdk/Contents/Home/jre
Default locale: en_US, <span class="built_in">platform</span> encoding: UTF-<span class="number">8</span>
OS name: <span class="string">"mac os x"</span>, <span class="built_in">version</span>: <span class="string">"10.9.4"</span>, arch: <span class="string">"x86_64"</span>, family: <span class="string">"mac"</span>
</code></pre><p>确保你已经安装了Maven 3 或更高的。如果Maven 命令在你的电脑上是无效的， 请按下面的指南进行安装 ： <a href="http://maven.apache.org/guides/getting-started" target="_blank" rel="external">http://maven.apache.org/guides/getting-started</a></p>
]]></content>
    
    
      <category term="ninja" scheme="http://www.ifzer.com/tags/ninja/"/>
    
      <category term="java" scheme="http://www.ifzer.com/tags/java/"/>
    
      <category term="framework" scheme="http://www.ifzer.com/tags/framework/"/>
    
      <category term="web" scheme="http://www.ifzer.com/tags/web/"/>
    
      <category term="ninja_web_framework" scheme="http://www.ifzer.com/categories/ninja-web-framework/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[基本概念：路由-控制器-视图]]></title>
    <link href="http://www.ifzer.com/2014/09/16/ninja-%E5%BF%8D%E8%80%85java%20web%E6%A1%86%E6%9E%B6-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5%EF%BC%9A%E8%B7%AF%E7%94%B1-%E6%8E%A7%E5%88%B6%E5%99%A8-%E8%A7%86%E5%9B%BE/"/>
    <id>http://www.ifzer.com/2014/09/16/ninja-忍者java web框架-基本概念：路由-控制器-视图/</id>
    <published>2014-09-16T04:25:58.000Z</published>
    <updated>2014-09-17T01:41:31.000Z</updated>
    <content type="html"><![CDATA[<h3 id="路由_a_route">路由 a route</h3>
<p>路由文件是每个http请求的入口。在这里必须映射一个URL像 /index.html 或者 /person.json 到一些东西在你的应该内部来实际处理些事情。这就是被定义的路由文件。</p>
<p>按约定每个忍者应用饮食如下的java文件：<code>conf/Routes.java. Routes.java</code> 包含所有的路由为你的应用。</p>
<p>一个最小的路由文件看起来如下：</p>
<pre><code>    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Routes</span> <span class="keyword">implements</span> <span class="title">ApplicationRoutes</span> </span>{

    <span class="annotation">@Override</span>
    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span>(Router router) {

        router.GET().route(<span class="string">"/"</span>).with(ApplicationController.class, <span class="string">"index"</span>);

    }
}
</code></pre><p>上面的代码意味着请求到服务器的 <code>/</code> 路径 被 <code>ApplicationController</code> 这个控制器类的 <code>index</code> 方法处理， 但是 <code>ApplicationController</code> 长成什么样呢？</p>
<hr>
<h3 id="控制器_a_controller">控制器 a controller</h3>
<p>控制器只是个简单的java类并且应该被放在package <code>controller</code> 下面<br>    package controllers;</p>
<pre><code>@Singleton
<span class="keyword">public</span> <span class="keyword">class</span> ApplicationController {       

    <span class="keyword">public</span> Result <span class="title">index</span>() {
        <span class="keyword">return</span> Results.html();

    }
}
</code></pre><p>控制器方法总是会返回一个 <code>Result</code> 。 <code>Results</code>(多了个s)只是一个小的工具类用来帮助我们更加简单的创建结果。在上例中，应用控制结果为html响应。</p>
<p>现在我们得到了等式的一边-从忍者到路由到我们的控制器。但是忍者怎么生成这html的输出？</p>
<h3 id="视图_a_view">视图 a view</h3>
<p>视图被声明在包 <code>views</code>中。按约定视图与控制器的对应关系总是被放置在 <code>views/CONTROLLER_NAME/METHOD_NAME</code> 。 在我们的例子，这视图将被找到从 <code>views/ApplicationController/index.ftl.html</code> 。</p>
<p>一个真实的简单视图可以如下：<br><code>&lt;html&gt;
    &lt;body&gt;
        &lt;h1&gt;Hello world&lt;/h1&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></p>
<h3 id="总结">总结</h3>
<p>这是忍者的基本概念， 并且这是所有你需要启动你自己的应用。 忍者的基本概念总是 <code>Route =&gt; Controller =&gt; View</code> 。</p>
<p>当然视图不仅可以表示为html, 也可以为json 或 xml。 当然你也可以表示你的模式用你的视图。更多关于视图表示的在接下来的文档部分。</p>
]]></content>
    
    
      <category term="ninja" scheme="http://www.ifzer.com/tags/ninja/"/>
    
      <category term="java" scheme="http://www.ifzer.com/tags/java/"/>
    
      <category term="framework" scheme="http://www.ifzer.com/tags/framework/"/>
    
      <category term="web" scheme="http://www.ifzer.com/tags/web/"/>
    
      <category term="ninja_web_framework" scheme="http://www.ifzer.com/categories/ninja-web-framework/"/>
    
  </entry>
  
</feed>
